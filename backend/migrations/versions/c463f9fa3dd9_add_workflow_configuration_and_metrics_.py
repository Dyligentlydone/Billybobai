"""Add workflow configuration and metrics models

Revision ID: c463f9fa3dd9
Revises: 00aba09dab33
Create Date: 2025-04-14 10:58:42.146095

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c463f9fa3dd9'
down_revision: Union[str, None] = '00aba09dab33'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First drop tables with foreign key dependencies
    op.drop_table('attachments')
    op.drop_table('inbound_emails')
    op.drop_table('email_threads')
    op.drop_table('api_integrations')
    
    # Create new tables
    op.create_table('metrics_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workflow_id', sa.String(length=255), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('metric_type', sa.String(length=50), nullable=False),  # Using String instead of Enum
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('metric_metadata', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.CheckConstraint("metric_type IN ('RESPONSE_TIME', 'ERROR_RATE', 'MESSAGE_VOLUME', 'AI_CONFIDENCE', 'CUSTOMER_SENTIMENT')")
    )
    
    # Add new columns to existing tables
    op.add_column('messages', sa.Column('ai_confidence', sa.Float(), nullable=True))
    op.add_column('messages', sa.Column('response_time', sa.Integer(), nullable=True))
    op.add_column('messages', sa.Column('customer_sentiment', sa.String(length=50), nullable=True))  # Using String instead of Enum
    op.add_column('messages', sa.Column('template_used', sa.String(length=255), nullable=True))
    op.add_column('messages', sa.Column('processing_attempts', sa.Integer(), nullable=True))
    op.add_column('messages', sa.Column('error_message', sa.String(), nullable=True))
    op.create_check_constraint(
        'customer_sentiment_values',
        'messages',
        "customer_sentiment IN ('POSITIVE', 'NEUTRAL', 'NEGATIVE')"
    )
    
    # Add workflow configuration columns with default empty JSON
    op.add_column('workflows', sa.Column('workflow_type', sa.String(length=50), nullable=False, server_default='SMS'))  # Using String instead of Enum
    op.add_column('workflows', sa.Column('brand_tone_config', sa.JSON(), nullable=False, server_default='{}'))
    op.add_column('workflows', sa.Column('ai_training_config', sa.JSON(), nullable=False, server_default='{}'))
    op.add_column('workflows', sa.Column('context_config', sa.JSON(), nullable=False, server_default='{}'))
    op.add_column('workflows', sa.Column('response_config', sa.JSON(), nullable=False, server_default='{}'))
    op.add_column('workflows', sa.Column('monitoring_config', sa.JSON(), nullable=False, server_default='{}'))
    op.create_check_constraint(
        'workflow_type_values',
        'workflows',
        "workflow_type IN ('SMS', 'EMAIL', 'VOICE')"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('workflow_type_values', 'workflows')
    op.drop_column('workflows', 'monitoring_config')
    op.drop_column('workflows', 'response_config')
    op.drop_column('workflows', 'context_config')
    op.drop_column('workflows', 'ai_training_config')
    op.drop_column('workflows', 'brand_tone_config')
    op.drop_column('workflows', 'workflow_type')
    
    op.drop_constraint('customer_sentiment_values', 'messages')
    op.drop_column('messages', 'error_message')
    op.drop_column('messages', 'processing_attempts')
    op.drop_column('messages', 'template_used')
    op.drop_column('messages', 'customer_sentiment')
    op.drop_column('messages', 'response_time')
    op.drop_column('messages', 'ai_confidence')
    
    # Drop metrics_logs table
    op.drop_table('metrics_logs')
    
    # Recreate old tables
    op.create_table('api_integrations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('credentials', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='api_integrations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='api_integrations_pkey')
    )
    
    op.create_table('email_threads',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('thread_id', sa.VARCHAR(length=255), nullable=False),
    sa.Column('business_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('subject', sa.VARCHAR(length=255), nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_email_threads_thread_id', 'email_threads', ['thread_id'], unique=True)
    
    op.create_table('inbound_emails',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('business_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('thread_id', sa.VARCHAR(length=255), nullable=True),
    sa.Column('from_email', sa.VARCHAR(length=255), nullable=True),
    sa.Column('to_email', sa.VARCHAR(length=255), nullable=True),
    sa.Column('subject', sa.VARCHAR(length=255), nullable=True),
    sa.Column('text', sa.VARCHAR(), nullable=True),
    sa.Column('html', sa.VARCHAR(), nullable=True),
    sa.Column('spam_score', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ),
    sa.ForeignKeyConstraint(['thread_id'], ['email_threads.thread_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('attachments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email_id', sa.INTEGER(), nullable=True),
    sa.Column('filename', sa.VARCHAR(length=255), nullable=True),
    sa.Column('content_type', sa.VARCHAR(length=100), nullable=True),
    sa.Column('size', sa.INTEGER(), nullable=True),
    sa.Column('url', sa.VARCHAR(length=255), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['email_id'], ['inbound_emails.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
